# said auther (me) here really wants to thank those folks that 
# made 'fftw' (http://www.fftw.org) for all of there yummy config scripting pieces
# that are sampled all over in this config script..made my life so simple....

AC_INIT(src/version.cc)

AM_INIT_AUTOMAKE(blochlib,1.2)
AC_ISC_POSIX

#AC_PROG_CC
#ACX_PROG_CXX_EGCS

#AC_PROG_CXX
#AC_LANG_CPLUSPLUS

AC_REQUIRE_CPP
#ACX_PROG_CXX_EGCS
ACX_TEST_GCC 

SHARED_VERSION_INFO="1:0:0"
SHARED_VERSION=`echo $SHARED_VERSION_INFO | awk -F':' '{ print $1 "." $3 "." $2 }'`
AC_SUBST(SHARED_VERSION)
AC_SUBST(SHARED_VERSION_INFO)


AM_CONFIG_HEADER(src/blochconfig.h)

AC_ARG_WITH(gcc, [  --with-gcc       use gcc instead of the native compiler cc], ok=$withval, ok=no)
if test "$ok" = "yes"; then
	CC=gcc
	CXX=g++;
	GCXX="yes";
fi

AC_ARG_WITH(cpp, 
    [  --with-cpp=<prog>  choose a C++ compiler],
    [OTHERCC_PREFIX=$with_cpp 
    CC=$with_cpp
    CXX=$with_cpp
    ACX_TEST_GCC],
    [OTHERCC_PREFIX="/usr/bin/" ]
)

AC_ARG_WITH(f77, 
    [  --with-f77=<prog>  choose some other Fortran 77 compiler],
    [OTHERCC_PREFIX=$with_f77 
    F77=$with_f77],
    [OTHERCC_PREFIX="/usr/bin/" ]
)

AC_ARG_WITH(gcc3,
    [ --with-gcc3=<path> path to gcc V3 installation. e.g. /usr/local/],
    [GCC_PREFIX=$with_gcc3 
    CC="${GCC_PREFIX}/bin/gcc "   
    CXX="${GCC_PREFIX}/bin/g++ "
    GCXX="yes"],
    [GCC_PREFIX="/usr/bin/" ]
)

#should we use expections handing or not
AC_ARG_ENABLE(exceptions, [  --enable-exceptions          use c++ exceptions or simple 'exit'], ok=$enableval, ok=no)
if test "$ok" = "yes"; then
	AC_DEFINE(USE_EXCEPTIONS)
fi

#test for the 'signal.h' header
AC_CHECK_HEADERS(signal.h)


BLASLIB="";
GOTATLAS="";
AC_ARG_WITH(atlas, 
    [  --with-atlas=<path to ATLAS's BLAS lib> (i.e. /usr/local/) use ATLAS BLAS lib],
    [BLASLIB="-L$with_atlas -lcblas -latlas"
    GOTATLAS="yes"
    ],
    [BLASLIB=""; ]
)

#tese for the ATLAS libs
if test -n "$GOTATLAS"; then 
	AC_MSG_CHECKING([for ATLAS libraries ])
	LIBCATLAS="$with_atlas/libcblas.a"
	YIPPIE="no"
	if test -e "$LIBCATLAS"; then
		YIPPIE="yes"
	else
		AC_MSG_ERROR(\ncouldn't find "libcblas.a" library for --with-atlas);
	fi
	
	LIBCATLAS="$with_atlas/libatlas.a"
	if test -e "$LIBCATLAS"; then
		YIPPIE="yes"
	else
		AC_MSG_ERROR(\ncouldn't find "libatlas.a" library for --with-atlas);
	fi
	AC_MSG_RESULT($YIPPIE)
fi
	
	



HBLASLIB="";
AC_ARG_WITH(blas, 
    [  --with-blas=<lib>  choose some other 'blas' library],
    [HBLASLIB=$with_blas ],
    [HBLASLIB=""; ]
)


#test to make sure the lib is there
if test -n "$HBLASLIB"; then
	if test -n "$GOTATLAS"; then 
		AC_MSG_ERROR(cannot use both --with-atlas and  --with-blas);
	else
		BLASLIB="$HBLASLIB"
	fi
fi


#IF we are using Intel's MKL lib for our BLAS, we also need
# the '-lpthread' 
AC_ARG_ENABLE(pthread, [  --enable-pthread           link project with the pthread lib (nessesary if using "INTEL'S MKL lib)], ok=$enableval, ok=no)
if test "$ok" = "yes"; then
	BLASLIB="${BLASLIB} -lpthread "
fi

#test to make sure the lib is there
if test -n "$BLASLIB"; then
	AC_DEFINE(AUX_BLAS_LIB)
fi

AC_SUBST(BLASLIB)



LOCALPATH=`pwd`
BASELIBNAME="bloch"
LIBNAME="bloch"
PROFILENAME="bloch_pg"
DEBUGNAME="bloch_g"

#STUFF FOR LIBMINUIT

USE_MIN="yes"
MINUIT_DIR=""
MINUIT_LIB=""
FORTLIB=""
AC_ARG_ENABLE(minuit, [  --enable-minuit       enable(default)/disable MINUIT library inclusion], ok=$enableval, ok=yes)
if test "$ok" = "no"; then
	USE_MIN="no"
fi

if test -z "$F77"; then
	AC_CHECK_PROGS(F77, f77 xlf xlf77 cf77 fl32 g77 gfortran fort77 f90 xlf90)
	if test -z "$F77"; then
                echo "*** Couldn't find f77 compiler.  Switching to --disable-minuit."
		enable_fortran="no"
		USE_MIN="no"
	fi
fi

if test "$USE_MIN" = "yes"; then
	if test -n "$F77"; then
		if test "$F77" = "g77"; then
			AC_DEFINE(f2cFortran)
		fi

		FFLAGS="-O3 -funroll-loops"
AC_F77_LIBRARY_LDFLAGS	
		FORTLIB=${FLIBS}
		dnl Checks for library functions.
		AC_CHECK_FUNC(getline, AC_DEFINE(HAVE_GETLINE))
		MINUIT_DIR="minuit code"
		MINUIT_LIB="minuit/minuit/code/libminuit.la"
		
		AC_DEFINE(USE_MINUIT)
		AC_SUBST(MINUIT_DIR)
		AC_SUBST(MINUIT_LIB)
	else
		USE_MIN="no"
	fi
fi

AC_SUBST(FORTLIB)
AC_SUBST(MINUIT_DIR)
AC_SUBST(MINUIT_LIB)
AC_SUBST(USE_MIN)


AC_LANG_CPLUSPLUS

#define the namesapce name
AC_DEFINE(BL_NAMESPACE, BlochLib)

#checking for 'namespace' keyword
AC_MSG_CHECKING([for namespace keyword])
AC_TRY_RUN([

namespace BLTESTER{
int moo(int j){ return j*3;	}
}
using namespace BLTESTER;
int main(int argc, char *argv[]){ 
	int k=9;
	int p=moo(k);
	return 0;	
}
],
ok=yes, ok=no, ok=yes)
if test "$ok" = "yes"; then
	AC_DEFINE(BEGIN_BL_NAMESPACE, namespace BL_NAMESPACE {)
	AC_DEFINE(END_BL_NAMESPACE, })
fi
if test "$ok" = "no"; then
	AC_DEFINE(BEGIN_BL_NAMESPACE, )
	AC_DEFINE(END_BL_NAMESPACE, )
fi


AC_MSG_RESULT($ok)

## MIN MAX testing
AC_MSG_CHECKING([for max(thing) function])
AC_TRY_COMPILE([
#include <math.h>
#include <map>
],[int moo=0; moo=max(moo); ],
    ok=yes, ok=no, ok=yes)
if test "$ok" = "no"; then
	AC_DEFINE(HAVE_MAX1)
fi
AC_MSG_RESULT($ok)

AC_MSG_CHECKING([for max(thing, thing) function])
AC_TRY_COMPILE([#include <math.h>
#include <map>
],[
int moo=0, koo=0; koo=std::max(moo,koo); exit(0);	],
    ok=yes, ok=no, ok=yes)
if test "$ok" = "no"; then
	AC_DEFINE(HAVE_MAX2)
fi
AC_MSG_RESULT($ok)

AC_MSG_CHECKING([for min(thing) function])
AC_TRY_COMPILE([#include <math.h>
#include <map>
],[
int moo=0; moo=std::min(moo);exit(0); ],
    ok=yes, ok=no, ok=yes)
if test "$ok" = "no"; then
	AC_DEFINE(HAVE_MIN1)
fi
AC_MSG_RESULT($ok)

AC_MSG_CHECKING([for min(thing, thing) function])
AC_TRY_COMPILE([#include <math.h>
#include <map>
],[
int moo=0, koo=0; koo=std::min(moo,koo); exit(0);	],
    ok=yes, ok=no, ok=yes)
if test "$ok" = "no"; then
	AC_DEFINE(HAVE_MIN2)
fi
AC_MSG_RESULT($ok)


AC_MSG_CHECKING([for sign(thing) function])
AC_TRY_COMPILE([#include <math.h>
#include <map>
],[
int moo=0, koo=0; moo=std::sign(koo); exit(0);	],
    ok=yes, ok=no, ok=yes)
if test "$ok" = "no"; then
	AC_DEFINE(HAVE_SIGN)
fi
AC_MSG_RESULT($ok)

##Finding the users input into good optimizations


profile="no"
debug="no"

ACX_PROG_CXX_MAXOPT

CXXFLAGMAXOPT=$CXXFLAGS

#turn on debugging for lib
AC_ARG_ENABLE(debug, [  --enable-debug        generate debugging symbols info (no other optimizattion are allowed with this)], profile=$enableval, profile=no)
if test "$profile" = "yes"; then
	LIBNAME="bloch_g"
	debug="yes"
	CXXFLAGS=" -g -ftemplate-depth-40 "
fi

AC_ARG_ENABLE(profile, [  --enable-profile    generate profiling and debugging info (no other optimizattion are allowed with this)], profile=$enableval, profile=no)
if test "$profile" = "yes"; then
	LIBNAME="bloch_pg"
	CXXFLAGS=" -pg -ftemplate-depth-40 "
fi



MPI_INC=""
enable_mpi="no";
MPILIBDIR=""
# Ask user for path to MPI stuff:.
AC_ARG_WITH(mpi,
    [ --with-mpi=<path> prefix of MPI installation. e.g. /usr/local/],
    [MPI_PREFIX=$with_mpi 
    CXXFLAGS="$CXXFLAGS -DHAVE_MPI"
    MPI_INC="-I${MPI_PREFIX}/include"
    MPILIBDIR="-L${MPI_PREFIX}/lib"   
    enable_mpi="yes"],
    [MPI_PREFIX="/usr/local"]
)



MPILIBS=""
AC_CHECK_PROGS(MPICC, mpiCC hcc, $CXX)
if test "$enable_mpi" = "yes"; then
	AC_MSG_CHECKING([for functioning MPI library ])
	save_CXX="$CXX"
	CXX="$CXX $MPI_INC $MPILIBDIR"
	save_LIBS="$LIBS"
	LIBS="-lmpi $LIBS"
	MPILIBS="-lmpi"
	save_CC="$CC"
	CC="$CXX"
	AC_TRY_RUN([#include <mpi.h>
		    int main(int argc, char *argv[]){ MPI_Init(&argc,&argv); return 0;	}],
		    ok=yes, ok=no, ok=yes)
	if test "$ok" = "no"; then
		LIBS="$save_LIBS"
		LIBS="-lmpich $LIBS"
		MPILIBS="-lmpich"
		AC_TRY_RUN([#include <mpi.h>
		int main(int argc, char *argv[]){ MPI_Init(&argc,&argv); return 0;	}],
		    ok=yes, ok=no, ok=yes)
		if test "$ok" = "no"; then
			AC_MSG_ERROR(couldn't find mpi library for --with-mpi)
		fi
		AC_DEFINE(HAVE_MPI)
	fi
	LIBS="$save_LIBS"
	CXX="$save_CXX"
	CC="$save_CC"
	AC_MSG_RESULT($enable_mpi)
fi

AC_SUBST(MPILIBS)
AC_SUBST(MPI_PREFIX)
AC_SUBST(MPI_INC)



FFTW_INC=""
enable_fftw="no";
FFTWLIBDIR=""
# Path to FFTW library
AC_ARG_WITH(fftw,
    [ --with-fftw=<path> prefix of FFTW installation. (e.g. /usr/local/)],
    [FFTW_PREFIX=$with_fftw 
    FFTW_INC="-I${FFTW_PREFIX}/include"
    FFTWLIBDIR="-L${FFTW_PREFIX}/lib"   
    enable_fftw="yes"],
    [FFTW_PREFIX="/usr/local"]
)

AC_ARG_WITH(fftw3,
    [ --with-fftw3=<path> prefix of FFTW !!VERSION 3!! installation. (e.g. /usr/local/)],
    [FFTW_PREFIX=$with_fftw3 
    FFTW_INC="-I${FFTW_PREFIX}/include"
    FFTWLIBDIR="-L${FFTW_PREFIX}/lib"   
    enable_fftw3="yes"],
    [FFTW_PREFIX="/usr/local"]
)

FFTWLIBS=""
if test "$enable_fftw" = "yes"; then
	AC_MSG_CHECKING([for functioning FFTW library ])
	save_CXX="$CXX"
	CXX="$CXX $FFTW_INC $FFTWLIBDIR"
	save_LIBS="$LIBS"
	LIBS="-lfftw $LIBS"
	FFTWLIBS="-lfftw"
	save_CC="$CC"
	CC="$CXX"
	
	AC_TRY_RUN([
	
	#include <fftw.h>
	int main(int argc, char *argv[]){ 
		const int len=33;
		fftw_plan fplan;
		fplan=fftw_create_plan(len, FFTW_FORWARD,FFTW_ESTIMATE);
		fftw_complex *fftw_dat, *fftw_outdat;
		fftw_dat= new fftw_complex[len];
		fftw_outdat=new fftw_complex[len];
		for(int j=0;j<len;++j){
			c_re(fftw_dat[j])=double(j);
			c_im(fftw_dat[j])=double(-j);
		}
		fftw_one(fplan, fftw_dat, fftw_outdat);		
		return 0;	
	}
	],
	ok=yes, ok=no, ok=yes)
	if test "$ok" = "no"; then
		AC_MSG_ERROR(couldn't find FFTW library for --with-fftw)
	else
		AC_DEFINE(HAVE_FFTW_II)
		AC_DEFINE(HAVE_FFTW)
	fi
	LIBS="$save_LIBS"
	CXX="$save_CXX"
	CC="$save_CC"	
	AC_MSG_RESULT($enable_fftw)

fi

if test "$enable_fftw3" = "yes"; then
	AC_MSG_CHECKING([for functioning FFTW Version 3 library ])
	save_CXX="$CXX"
	CXX="$CXX $FFTW_INC $FFTWLIBDIR"
	save_LIBS="$LIBS"
	LIBS="-lfftw3 $LIBS"
	FFTWLIBS="-lfftw3"
	save_CC="$CC"
	CC="$CXX"
	echo $CXX
	AC_TRY_RUN([
	
	#include <fftw3.h>
	int main(int argc, char *argv[]){
		const int N=33;
		fftw_complex *in, *out;
		fftw_plan p;
		in =new fftw_complex[N];
		out =new fftw_complex[N];
		p = fftw_plan_dft_1d(N, in, out, FFTW_FORWARD, FFTW_ESTIMATE);
		for(int j=0;j<N;++j){
				in[j][0]=double(j% 4);
				in[j][1]=double(-j%4);
		}
	
		fftw_execute(p); /* repeat as needed */
		fftw_destroy_plan(p);
		delete [] in; delete [] out;
		return 0;
	}

	],
	ok=yes, ok=no, ok=yes)
	if test "$ok" = "no"; then
		AC_MSG_ERROR(FFTW v 3 FAILED to configure library for --with-fftw3)
	else
		AC_DEFINE(HAVE_FFTW_III)
		AC_DEFINE(HAVE_FFTW)
	fi
	LIBS="$save_LIBS"
	CXX="$save_CXX"
	CC="$save_CC"	
	AC_MSG_RESULT($enable_fftw3)

fi

AC_SUBST(FFTWLIBS)
AC_SUBST(FFTW_PREFIX)
AC_SUBST(FFTW_INC)

ACX_CHECK_CXX_FLAGS($CXXFLAGS)

AC_SUBST(CXXFLAGS)
AC_SUBST(CXXFLAGMAXOPT)
AC_SUBST(LOCALPATH)

#place in the modified library name (depending on the optim options)

#ACX_SUBST_XXX(LIBNAME)
AC_SUBST(PROFILENAME)
AC_SUBST(DEBUGNAME)
AC_SUBST(BASELIBNAME)

INST="$prefix"
if test "$INST" = "NONE"; then
	INST="/usr/local";
fi
AC_SUBST(INST)



# Get the version number that will be appended to shared libraries:
VERSION_INFO=`echo $SHARED_VERSION_INFO | awk -F':' '{ print $1 "." $2 "." $3 }'`
AC_SUBST(VERSION_INFO)



AM_DISABLE_SHARED
AM_PROG_LIBTOOL


AC_HEADER_STDC

AC_TYPE_SIZE_T

ACX_CHECK_CONST
ACX_CHECK_INLINE

AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_RANLIB

AC_HEADER_TIME
AC_CHECK_HEADERS(sys/time.h)
AC_CHECK_HEADERS(unistd.h)
AC_CHECK_HEADERS(climits)
AC_CHECK_HEADERS(limits.h)


AC_CHECK_FUNCS(isnan)
AC_CHECK_FUNCS(finite)
AC_OUTPUT(blcc Makefile src/Makefile src/mpi/Makefile src/minuit/Makefile src/minuit/minuit/Makefile src/minuit/minuit/minuit/Makefile src/minuit/minuit/code/Makefile src/container/Makefile src/container/Vector/Makefile src/container/matrix/Makefile src/QMspins/Makefile src/QMspins/driver/Makefile  src/stencils/Makefile src/driver/Makefile src/utils/Makefile src/container/grids/Makefile src/bloch/Makefile src/timetrain/Makefile)

chmod uga+x blcc
echo "**************************************************************";
echo "* Unless you have not already done so, you should first      *";
echo "* make the Profile library, the Debug library, and           *";
echo "* LASTLY make the fully optimized library.  So here          *";
echo "* would the correct ordering for the correct building        *";
echo "*                                                            *";
echo "*   ./configure --prefix=<your install dir>                  *";
echo "*               --with-blas=<path to static BLAS lib>        *";
echo "*              OR --with-atlas=<path to static BLAS lib>     *";
echo "*               --with-mpi=<path to MPI install dir>         *";
echo "*               --with-fftw=<path to FFTW install dir>       *";
echo "*   make                                                     *";
echo "*   make install                                             *";
echo "*                                                            *";
echo "*  The Options::                                             *";
echo "*                                                            *";
echo "*     --with-blas--> allows inclusion of archecture          *";
echo "*          optimized BLAS libraries for speed sake           *";
echo "*                                                            *";
echo "*     --with-atlas--> allows inclusion of archecture         *";
echo "*          optimized ATLAS BLAS libraries for speed sake     *";
echo "*                                                            *";
echo "*     --with-fftw--> allows linking with the FFTW library    *";
echo "*          for Fast Fourier Transforms                       *";
echo "*                                                            *";
echo "*     --with-fftw3--> allows linking with the FFTW library   *";
echo "*         VERSION 3 for Fast Fourier Transforms              *";
echo "*                                                            *";
echo "*     --with-mpi--> compile using MPI to parallelize         *";
echo "*          powder loops                                      *";
echo "*                                                            *";
echo "*     --enable-pthread--> compile using pthreads             *";
echo "*          ONLY nessesary if you are using a BLAS that       *";
echo "*          requires pthreads (like Intel's MKL)              *";
echo "*                                                            *";
echo "*     --enable-profile--> compile the profiling lib          *";
echo "*             'libbloch_pg.a'                                *";
echo "*                                                            *";
echo "*     --enable-debug--> compile the debugging lib            *";
echo "*             'libbloch_g.a'                                 *";
echo "*                                                            *";
echo "*     --with-cpp--> use a c++ compile other then the default *";
echo "*                                                            *";
echo "*     --enable-exceptions--> compile the EXCEPTIONS          *";
echo "*             instead of 'exit'                              *";
echo "*                                                            *";
echo "*   ./configure  <your options>                              *";
echo "*   make clean                                               *";
echo "*   make                                                     *";
echo "*   make install                                             *";
echo "*                                                            *";
echo "* This will ensure you have all the tools you need to write  *";
echo "* and TEST your programs for speed and give you the best     *";
echo "* speed when you have finished your profileing or debugging  *";
echo "*                                                            *";
echo "* There is a script file called 'blcc' that takes care of    *";
echo "* linking the correct library and including the correct      *";
echo "* include paths...(i.e. it uses the profile lib, the debug   *";
echo "* lib, or the optimzed lib)                                  *";
echo "* this file can be found in this directory.....              *";
echo "**************************************************************";

