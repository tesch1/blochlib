AC_INIT(src/solid.cc)

AM_INIT_AUTOMAKE(solid,2.0)

AM_CONFIG_HEADER(config.h)

AC_ISC_POSIX

ACX_PROG_CXX_EGCS
ACX_TEST_GCC 

AC_PROG_CC
AC_PROG_CXX

AC_ARG_WITH(gcc, [  --with-gcc              use gcc instead of the native compiler cc], ok=$withval, ok=no)
if test "$ok" = "yes"; then
	CC=gcc
	CXX=g++;
	GCXX="yes";
fi


AC_ARG_WITH(cpp, 
    [  --with-cpp=<prog>  choose a C++ compiler],
    [OTHERCC_PREFIX=$with_cpp 
    CC=$with_cpp
    CXX=$with_cpp
    ACX_TEST_GCC],
    [OTHERCC_PREFIX="/usr/bin/" ]
)

ACX_PROG_CXX_MAXOPT

AC_ARG_ENABLE(debug, [  --enable-debug              build binaries with debugginf info], ok=$enableval, ok=no)
if test "$ok" = "yes"; then
	CXXFLAGS="-g -ftemplate-depth-40 "
fi

# Ask user for path to BlochLib stuff:.
AC_ARG_WITH(blochlib,
    [ --with-blochlib=<path> prefix of BlochLib installation. e.g. /usr/local/],
    [BLLIB_PREFIX=$with_blochlib
	enable_blochlib="yes"],
    AC_MSG_ERROR([You must call configure with the --with-blochlib option.
    This tells configure where to find the BlochLib C++ library and headers.
    e.g. --with-blochlib=/usr/local or --with-blochlib=/usr])
)

#tese for the ATLAS libs
if test -d "$with_blochlib" ; then
	AC_MSG_CHECKING([for functioning BlochLib library ])
	LIBB="$with_blochlib/lib/libbloch.a"
	YIPPIE="no"
	if test -e "$LIBB"; then
		YIPPIE="yes"
	else
		AC_MSG_ERROR(\ncouldn't find "libblochlib.a" library for --with-blochlib);
	fi
	
	AC_MSG_RESULT($YIPPIE)
else
	AC_MSG_ERROR(\ncouldn't find "libblochlib.a" library for --with-blochlib);
fi
	


AC_SUBST(BLLIB_PREFIX)
BLLIB_DIR="-L${BLLIB_PREFIX}/lib/"
BLLIB_LIBS="-lbloch"
BLLIB_CXXFLAGS="-I${BLLIB_PREFIX}/include/blochlib/"

#CXXFLAGS="$CXXFLAGS $BLLIB_CXXFLAGS"
#LIBS="$LIBS $BLLIB_LIBS"


BLASLIB="";
GOTATLAS="";
AC_ARG_WITH(atlas, 
    [  --with-atlas=<path to ATLAS's BLAS lib> (i.e. /usr/local/) use ATLAS BLAS lib],
    [BLASLIB="-L$with_atlas -lcblas -latlas"
    GOTATLAS="yes"
    ],
    [BLASLIB=""; ]
)

#tese for the ATLAS libs
if test -n "$GOTATLAS"; then 
	AC_MSG_CHECKING([for ATLAS libraries ])
	LIBCATLAS="$with_atlas/libcblas.a"
	YIPPIE="no"
	if test -e "$LIBCATLAS"; then
		YIPPIE="yes"
	else
		AC_MSG_ERROR(\ncouldn't find "libcblas.a" library for --with-atlas);
	fi
	
	LIBCATLAS="$with_atlas/libatlas.a"
	if test -e "$LIBCATLAS"; then
		YIPPIE="yes"
	else
		AC_MSG_ERROR(\ncouldn't find "libatlas.a" library for --with-atlas);
	fi
	AC_MSG_RESULT($YIPPIE)
fi
	


HBLASLIB="";
AC_ARG_WITH(blas, 
    [  --with-blas=<lib>  choose some other 'blas' library],
    [HBLASLIB=$with_blas ],
    [HBLASLIB=""; ]
)


#test to make sure the lib is there
if test -n "$HBLASLIB"; then
	if test -n "$GOTATLAS"; then 
		AC_MSG_ERROR(cannot use both --with-atlas and  --with-blas);
	else
		BLASLIB="$HBLASLIB"
	fi
		
#	if test -e "$BLASLIB"; then
#		AC_DEFINE(AUX_BLAS_LIB)
#	else
#		AC_MSG_ERROR(couldn't find BLAS library for --with-blas);
#	fi
#
fi


LIBS="${LIBS} ${BLASLIB}"

dnl  IF we are using INTELS' MKL lib for our BLAS, we also need
dnl  the '-lpthread'

PTHREADLIB=""
AC_ARG_ENABLE(pthread, [  --enable-pthread           link project with the pthread lib (nessesary if using INTEL'S MKL lib)], ok=$enableval, ok=no)
if test "$ok" = "yes"; then
	PTHREADLIB="-lpthread"
fi
LIBS="${LIBS} ${PTHREADLIB}"


#turn on debugging for lib
AC_ARG_ENABLE(minopts, [  --enable-minopts            minimal optimizations for quick compilation], ok=$enableval, ok=no)
if test "$ok" = "yes"; then
	CXXFLAGS=" -ftemplate-depth-40 "
fi

MPI_INC=""
enable_mpi="no";
MPILIBDIR=""
# Ask user for path to MPI stuff:.
AC_ARG_WITH(mpi,
    [ --with-mpi=<path> prefix of MPI installation. e.g. /usr/local/],
    [MPI_PREFIX=$with_mpi 
    CXXFLAGS="$CXXFLAGS -DHAVE_MPI"
    MPI_INC="-I${MPI_PREFIX}/include"
    MPILIBDIR="-L${MPI_PREFIX}/lib"   
    enable_mpi="yes"],
    [MPI_PREFIX="/usr/local"]
)



MPILIBS=""
AC_CHECK_PROGS(MPICC, mpiCC hcc, $CXX)
if test "$enable_mpi" = "yes"; then
	AC_MSG_CHECKING([for functioning MPI library ])
	save_CXX="$CXX"
	CXX="$CXX $MPI_INC $MPILIBDIR"
	save_LIBS="$LIBS"
	LIBS="-lmpi $LIBS"
	MPILIBS="-lmpi"
	save_CC="$CC"
	CC="$CXX"
	AC_TRY_RUN([#include <mpi.h>
		    int main(int argc, char *argv[]){ MPI_Init(&argc,&argv); return 0;	}],
		    ok=yes, ok=no, ok=yes)
	if test "$ok" = "no"; then
		LIBS="$save_LIBS"
		LIBS="-lmpich $LIBS"
		MPILIBS="-lmpich"
		AC_TRY_RUN([#include <mpi.h>
		int main(int argc, char *argv[]){ MPI_Init(&argc,&argv); return 0;	}],
		    ok=yes, ok=no, ok=yes)
		if test "$ok" = "no"; then
			AC_MSG_ERROR(couldn't find mpi library for --with-mpi)
		fi
		#AC_DEFINE(HAVE_MPI)
	fi
	#LIBS="$save_LIBS"
	CXX="$save_CXX"
	CC="$save_CC"
	AC_MSG_RESULT($enable_mpi)
fi


BLLIB_CXXFLAGS="${BLLIB_CXXFLAGS} ${MPI_INC}"


FFTW_INC=""
enable_fftw="no";
enable_fftw3="no";
FFTWLIBDIR=""
# Path to FFTW library
AC_ARG_WITH(fftw,
    [ --with-fftw=<path> prefix of FFTW installation. (e.g. /usr/local/)],
    [FFTW_PREFIX=$with_fftw 
    FFTW_INC="-I${FFTW_PREFIX}/include"
    FFTWLIBDIR="-L${FFTW_PREFIX}/lib"   
    enable_fftw="yes"],
    [FFTW_PREFIX="/usr/local"]
)

FFTWLIBS=""
if test "$enable_fftw" = "yes"; then
	AC_MSG_CHECKING([for functioning FFTW library ])
	save_CXX="$CXX"
	CXX="$CXX $FFTW_INC $FFTWLIBDIR"
	save_LIBS="$LIBS"
	LIBS="-lfftw $LIBS"
	FFTWLIBS="-lfftw"
	save_CC="$CC"
	CC="$CXX"
	
	AC_TRY_RUN([
	
	#include <fftw.h>
	int main(int argc, char *argv[]){ 
		const int len=33;
		fftw_plan fplan, bplan;
		fplan=fftw_create_plan(len, FFTW_FORWARD,FFTW_ESTIMATE);
		fftw_complex *fftw_dat, *fftw_outdat;
		fftw_dat= new fftw_complex[len];
		fftw_outdat=new fftw_complex[len];
		for(int j=0;j<len;++j){
			c_re(fftw_dat[j])=double(j);
			c_im(fftw_dat[j])=double(-j);
		}
		fftw_one(fplan, fftw_dat, fftw_outdat);		
		return 0;	
	}
	],
	ok=yes, ok=no, ok=yes)
	if test "$ok" = "no"; then
		AC_MSG_ERROR(couldn't find FFTW library for --with-fftw)
	fi
	#else
	#	AC_DEFINE(HAVE_FFTW)
	#fi
	#LIBS="$save_LIBS"
	CXX="$save_CXX"
	CC="$save_CC"	
	AC_MSG_RESULT($enable_fftw)

fi

# Path to FFTW library
AC_ARG_WITH(fftw3,
    [ --with-fftw3=<path> prefix of FFTW VERSION 3 installation. (e.g. /usr/local/)],
    [FFTW_PREFIX=$with_fftw3 
    FFTW_INC="-I${FFTW_PREFIX}/include"
    FFTWLIBDIR="-L${FFTW_PREFIX}/lib"   
    enable_fftw3="yes"],
    [FFTW_PREFIX="/usr/local"]
)

if test -d "$with_fftw3"; then
	AC_MSG_CHECKING([for functioning FFTW Version 3 library ])
	save_CXX="$CXX"
	CXX="$CXX $FFTW_INC $FFTWLIBDIR"
	save_LIBS="$LIBS"
	LIBS="-lfftw3 $LIBS"
	FFTWLIBS="-lfftw3"
	save_CC="$CC"
	CC="$CXX"
	AC_TRY_RUN([
	
	#include <fftw3.h>
	int main(int argc, char *argv[]){
		const int N=33;
		fftw_complex *in, *out;
		fftw_plan p;
		in =new fftw_complex[N];
		out =new fftw_complex[N];
		p = fftw_plan_dft_1d(N, in, out, FFTW_FORWARD, FFTW_ESTIMATE);
		for(int j=0;j<N;++j){
				in[j][0]=double(j% 4);
				in[j][1]=double(-j%4);
		}
	
		fftw_execute(p); /* repeat as needed */
		fftw_destroy_plan(p);
		delete [] in; delete [] out;
		return 1;
	}

	],
	ok=yes, ok=no, ok=yes)
	#if test "$ok" = "no"; then
	#	AC_MSG_ERROR(FFTW v 3 FAILED to configure library for --with-fftw3)
	#fi
	#else
	#	AC_DEFINE(HAVE_FFTW_III)
	#	AC_DEFINE(HAVE_FFTW)
	#fi
	#LIBS="$save_LIBS"
	CXX="$save_CXX"
	CC="$save_CC"	
	AC_MSG_RESULT($ok)

fi

BLLIB_CXXFLAGS="${BLLIB_CXXFLAGS} ${FFTW_INC}"

ACX_CHECK_CXX_FLAGS($CXXFLAGS)

AC_DEFINE(ONUNIX, 1, [Tells me i'm using the unix make system])

AC_HEADER_STDC

AC_C_INLINE
AC_C_CONST
AC_TYPE_SIZE_T

AC_PROG_INSTALL
AC_PROG_LN_S

AC_PROG_RANLIB

AC_HEADER_TIME
AC_CHECK_HEADERS(sys/time.h)

SOLID_PATH=${prefix}/bin/solid

AC_SUBST(SOLID_PATH)

ACX_CHECK_CXX_FLAGS($CXXFLAGS)

AC_SUBST(CXXFLAGS)
AC_SUBST(CXXFLAGMAXOPT)
AC_SUBST(BLLIB_DIR)
AC_SUBST(BLLIB_LIBS)
AC_SUBST(BLLIB_CXXFLAGS)
AC_SUBST(MPILIBDIR)
AC_SUBST(MPI_INC)
AC_SUBST(MPILIBS)
AC_SUBST(FFTWLIBDIR)
AC_SUBST(FFTW_INC)
AC_SUBST(FFTWLIBS)

AC_OUTPUT(Makefile src/Makefile )
	  
echo "**************************************************************";
echo "* Here is the basic way to get going.....................    *";
echo "*                                                            *";
echo "*   ./configure --prefix=<your install dir>                  *";
echo "*               --with-blochlib=<path to bloch install dir>  *";
echo "*               --with-blas=<path to static BLAS lib>        *";
echo "*            OR --with-atlas=<path to static BLAS lib>       *";
echo "*               --with-mpi=<path to MPI install dir>         *";
echo "*               --with-fftw=<path to FFTW install dir>       *";
echo "*   make                                                     *";
echo "*   make install                                             *";
echo "*                                                            *";
echo "*  The Options::                                             *";
echo "*     --with-blochlib--> nessesary to compile anything for   *";
echo "*          this program                                      *";
echo "*                                                            *";
echo "*     --with-blas--> allows inclusion of archecture          *";
echo "*          optimized BLAS libraries for speed sake           *";
echo "*          MUST be the same one as used with BlochLib        *";
echo "*                                                            *";
echo "*     --with-atlas--> allows inclusion of archecture         *";
echo "*          optimized ATLAS BLAS libraries for speed sake     *";
echo "*                                                            *";
echo "*     --with-fftw--> allows linking with the FFTW library    *";
echo "*          for Fast Fourier Transforms                       *";
echo "*                                                            *";
echo "*     --with-fftw3--> allows linking with the FFTW library   *";
echo "*          VERSION 3 for Fast Fourier Transforms             *";
echo "*                                                            *";
echo "*     --with-mpi--> compile using MPI to parallelize         *";
echo "*          powder loops                                      *";
echo "*                                                            *";
echo "*     --enable-pthread--> compile using pthreads             *";
echo "*          ONLY nessesary if you are using a BLAS that       *";
echo "*          requires pthreads (like Intel's MKL)              *";
echo "*                                                            *";
echo "*                                                            *";
echo "* There will be this binary installed in your install dir    *";
echo "*                                                            *";
echo "*          <your install dir>/bin/solid                      *";
echo "*                                                            *";
echo "*                                                            *";
echo "**************************************************************";

