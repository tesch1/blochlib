Matlab Funcitons README

contents
	1) plotmag...
	2) plottrag...
	3) Solidplotter...

__________________________________________________________________________________

1) **************plotmag.m************************
this plots various views of the 3D vector Magnetic field data generated by the 
'Biot' and 'MultiBiot' classes...
-----------
function [XX,YY,ZZ,B0,B1,B2]=plotmag(indata, which, isoslices, numlines, view, plotcoil)

[X,Y,Z, Bx,By,Bz]=plotmag(data, which, [ isoslices, numlines,view, plotcoil])

  Plots various types of plots for Magnetic Field data as generated by 
  'biot.h' and 'biot.cc' in the 'Blochlib' pakage 
  (http://waugh.cchem.berkeley.edu/blochlib/)

 'data'--> is the data file to be read in
 'which' --> is the plot type
        =1 --> a simple plot3 of the coil and the grid points overlaid
        =2 --> a 3x3 bunch of contour plots that allow you to move through them
        =3 --> a 3x1 3D rendered bunch of isosurfaces
        =4 --> a 3x1 3D contour and pcolor surfaces (uses 'alpha' if matlab 6)
 'isoslices' --> is only valid for option which=3..the number of silces to include in the 3D renders
 'numlines'--> only for options which=3 and 4...determins divisions the stream lines
 'view' --> 'x', 'y', 'z', or 'a' (a==all)
 'plotcoil' --> 1 or 0...add the coil to the plots (for which==4 ONLY)
 it also returns the 3D grid strucutures for the grid and the Magnetic field
-------------

NOTE***:::the data format for the input file is important...
for this function to work properly...(plotting 3D vector
data is not intuitive, and so alot of work went into
generation of this little data file format so that
the plotting could be done with as many options as possible)

here is a function that will make the correct format
from the magnetic field data....

void writeMatlab(matstream &matout)
{
	matout.put("B", Bfield());
	Vector<coord<> > Points(CoilSize(), 0.0);
	Vector<double> pdiv;
	int ct=0;
	for(int j=0;j<Coils.size();++j){
		for(int i=0;i<Coils[j].Coil.size();++i){
			pdiv.push_back(ct);
			for(int k=0;k<Coils[j].Coil[i].size();++k){
				Points[ct]=Coils[j].Coil[i][k];
				ct++;
			}
		}
	}
	pdiv.push_back(ct);
	matout.put("pdiv", pdiv);
	matout.put("P", Points);
	matout.put("grid", grid->data());
	matout.put("N", grid->dim());
	coord<> tmp=grid->Max()-grid->Min();
	matout.put("r", tmp);
	matout.put("res",grid->dr());
	matout.close();
}

__________________________________________________________________________________


2) **************plottrag.m************************
 function h=plottrag(data,type, shows, vmat)

 plots and returns the data from a trajectory file
 from the 'blochlib' class "BlochSolver.writeData(ofstream)"
 or from a continous write process "BlochSolver.setWritePolicy(SolverOps::Continous)"

 the data should be organized like
 <spin1 X> <spin1 Y> <spin1 Z> ... <spinN X> <spinN Y> <spinN Z>

 data-->the input data
 type--> type of plot...either 'BlochSphere[1]' or 'time v Mx v My'[2]
 shows--> if a single number (i.e. 3) shows that spins trajectory
	   if a vector (i.e. 1:30) shows those spins...
           if 'a' shows all the trajectory
           if not present will show all the trajectories
 
 vmat--> AN ARRAY...iff not preset will display every point
         inputting "1:50" will show the first 50 points of tragectory

------
__________________________________________________________________________________

3)**************SOLID PLOTTER ********************
This is the main plotter program GUI for matlab to take
the data generated by either 'blochlib' or a number of
other formats and provide a simple interface for plotting
all the various plotting types matlab has to offer

in the matlab prompt type

"matlab>> Solidplotter"

and you should get the GUI

------------------LOADING FILES/VARIABELS----------------------------------
i hope the interface is intuitive...the main thing that may need
explaining are the 'loading' options

--the single file loader has many options

**"1D--Solid format"--> 
    this is the output type for the "BlochSolver.WriteFID()" function
    it contains a seven column format
    <time> <freq> <fft real> <fft imag> <fid real> <fid imag> <power fft>
**"2D--Solid format"-->
    this is is NxM ASCII matrix generated by the 'Solid' program
    (http://waugh.cchem.berkeley.edu/solid/)
    not really to be used with the Blochlib library
**"1D--Nx2 ASCII" --> 
    assumed to be a 
    <real> <imag> 
    1D data set
**"2D--MxN ASCII" --> 
    assumed to be a 2D data set where each data point is REAL
**"1D--Nx1 ASCII" --> 
    assumed to be a 
    <real>
    1D data set
**"2D-Nx4(sparse)" --> 
    THis is an ASCII file with the data elements in file given by
    <row index> <col index> <real> <imag>
**"2D-Nx3(sparse)" --> 
    THis is an ASCII file with the data elements in file given by
    <row index> <col index> <real>
**"2D-SpinSite(ASC XYZ) --> 
    THis is an **ASCII** file with the data elements in file given by
    saved in the "ASCII x y z" format that the Chemmagetics program
    allows you to save the data as....
**"1 or 2D-SpinSite" --> 
    THis is an **BINARY** raw 1 or 2D FID data DIRECTORY from the 'SpinSite' program 
**"1 or 2D-XWINNMR" --> 
    THis is an **BINARY** raw 1 or  2D FID data DIRECTORY from the 'XWINNMR' program 
**"MatLab File (*.mat)" --> 
    This loads up a matlab file...NOTE::
    after loading a matlab file you will need to specifiy a 
    variable in the 'Load a var' section on the GUI
    otherwise there is not data set loaded

--the Variable Loader loads a current workspace variable into the plotter setting

--THe "Multi File Loader' loads a sequence of '1D-Solid Format' files into
  a larger 2D array
  as an example....if i had 32 files named "data0, data1...data31"
  the "Begining Limit:" would be 0
  the "Ending Limit:" would be 31
  the "File Base:" would be 'data'
  
  this part of the plotter was meant for doing parameter space profiles of fids
  or as an easy way to allow for MPI parallelization inside the programs without
  spending too much effort on reconstrucuting complex data in the progrma
  ...simply spit out the data  and let this function handle the reconstruction
   

---------------------------PLOTTING OPTIONS-------------------
***Hit "Real", "Imag", "Abs" to actually plot something....

**1D plots(s) --> 
    if the data set is only 1D, then this is all you can do
    if it is a 2D data set then you can select slices within the data set
    transposing the data set will get you the slices along the other direction
**pcolor--> 
    The matlab 'pcolor' command which provides a 2D color map profile
    plot of the 2D data
**Sum 1st Dim-->
    Sums all the data along the 1st Dimension and plots a 1D 
**Sum 2nd Dim-->
    Sums all the data along the 2nd Dimension and plots a 1D 
**surface-->
    constructs a 3D view of the 2D data..note:: the color mapping
    here, i have noticed, tends to get a bit messed up after
    plotting this twice...basically, matlab does not erase/clear
    3D plots when attemping to plot anotherone...this little fact
    is very anoying...the only way to cure is to close the window
    and start again...
**contour-->
    contour plots...allows you to set the number of levels also
**CMXtype-->
    attempts to create a 3D view of 2D data like the
    SpinSight programs views of 2D data sets
    i have notice on Windows that the renderer is very bad here
    but on Linux boxes the Renderer is fine...
**plot3-->
    creates line plots of the slices along the 1st dimension
    provides a nice way to export the 3D set
    to a editable Postscript file (the surface, pcolor, CMX type
    all bitmap the resulting data)



